{"version":3,"sources":["components/navbar/index.js","components/jumbotron/index.js","components/carousel-items/index.js","components/footer/index.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","props","react_default","a","createElement","className","status","score","topScore","Jumbotron","src","alt","CarouselItem","href","key","id","onClick","handleClick","character","footer","lib","copyrights","App","state","chars","characters","rand","Math","random","shuffle","array","temporaryValue","randomIndex","currentIndex","length","floor","setGameStart","_this","setState","setGameLoss","incrementScore","setTopScore","newArray","Object","toConsumableArray","index","indexOf","objectSpread","clicked","console","log","_this2","this","Fragment","navbar","jumbotron","map","carousel_items","components_footer","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ca197734.chunk.js","sourcesContent":["import React from 'react';\nimport \"./style.css\";\n\n\nfunction Navbar(props) {\n    return (\n  <nav>\n    <div className=\"nav-wrapper\">\n      <ul className=\"\">\n        <li>Clicky Game!</li>\n        <li>{props.status}</li>\n        <li>Score: {props.score} | High-Score: {props.topScore}</li>\n      </ul>\n    </div>\n  </nav>\n    );\n};\n\nexport default Navbar;","import React from 'react';\nimport \"./style.css\";\n\n\nfunction Jumbotron() {\n  return (\n    <div className=\"jumbotron\">\n      <div className=\"overlay\"></div>\n      <h1 className=\"center\">Clicky Game</h1>\n      <h3 className=\"center\">Click on an image to earn points, but don't click on any more than once!</h3>\n      <img className=\"top-left\" src=\"assets/images/space-ship.png\" alt=\"Planet Express Ship\" />\n      <img className=\"top-right\" src=\"assets/images/space-ship.png\" alt=\"Planet Express Ship\" />\n      <img className=\"bottom-left\" src=\"assets/images/space-ship.png\" alt=\"Planet Express Ship\" />\n      <img className=\"bottom-right\" src=\"assets/images/space-ship.png\" alt=\"Planet Express Ship\" />\n    </div>\n  );\n};\n\nexport default Jumbotron;","import React from 'react';\nimport \"./style.css\";\n\n\nconst CarouselItem = props => {\n    return (\n        <a className=\"carousel-item waves-effect waves-dark\" href=\"#one!\" >\n            <img\n                key={props.id}\n                id={props.id}\n                src={props.src}\n                alt={props.alt}\n                onClick={() => props.handleClick(props.character)}\n            />\n        </a>\n    )\n};\n\nexport default CarouselItem;","import React from 'react';\nimport \"./style.css\";\nimport {Footer} from \"react-materialize\";\n\nfunction footer() {\n    return (\n<Footer className=\"center\" copyrights=\"&copy; 2019 Matthew Taliancich\">\n</Footer>\n    );\n};\n\nexport default footer;","import React, { Component } from 'react';\nimport Navbar from \"./components/navbar/\";\nimport Jumbotron from \"./components/jumbotron\"\nimport CarouselItem from \"./components/carousel-items\";\nimport Footer from \"./components/footer\"\nimport { Carousel } from \"react-materialize\";\nimport characters from \"./characters.json\";\n\n// app class that renders the elements to be called in index.js\nclass App extends Component {\n  state = {\n    status: \"Click An Image To Begin\",\n    score: 0,\n    topScore: 0,\n    chars: characters,\n    rand: Math.random(),\n  };\n\n  // shuffle function for arrays (not needed anymore, im going to spin the carousel on click instead)\n  // (need yarn package pure-react-carousel in order to do this by all research in react)\n  // (then set the hasMasterSlider to true and activate the slider on the handleclick and then deactivate it.)\n  shuffle = array => {\n    var currentIndex = array.length, temporaryValue, randomIndex;\n    // While there remain elements to shuffle...\n    while (0 !== currentIndex) {\n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n      // And swap it with the current element.\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n    return array;\n  };\n\n  // game reset function for win\n  setGameStart = () => {\n    this.setState({\n      status: \"Great Job! Click An Image To Begin Again\",\n      score: 0,\n      topScore: 0,\n      chars: characters,\n      rand: Math.random()\n    });\n  };\n\n  // game reset function for loss\n  setGameLoss = () => {\n    this.setState({\n      status: \"You guessed wrong! Click An Image To Try Again!\",\n      score: 0,\n      chars: characters,\n      rand: Math.random()\n    });\n  };\n\n  incrementScore = () => {\n    this.setState({\n      score: this.state.score + 1\n    });\n  };\n\n  setTopScore = () => {\n    if (this.state.topScore < 12) {\n      if (this.state.score >= this.state.topScore) {\n        this.setState({\n          topScore: this.state.topScore + 1\n        });\n      }\n    }\n    else {\n      this.setGameStart();\n    }\n    if (this.state.topScore === 12) {\n      this.setState({\n        status: this.state.status + 1\n      });\n    }\n  };\n\n  // on click set up a function to keep track of the users characters already selected and shuffle if \n  // game is not over\n  handleClick = props => {\n    const newArray = [...this.state.chars];\n    const index = newArray.indexOf(props);\n    newArray[index] = { ...props };\n\n    if (newArray[index].clicked === false) {\n      newArray[index].clicked = true;\n      // increment score after changing clicked to true\n      this.incrementScore();\n\n      // set the top score if score is higher than current top score and then set the newstate for status and shuffled array\n      this.setTopScore();\n      this.setState({\n        status: \"Nice Choice!\",\n        rand: Math.random(),\n      });\n    } else if (newArray[index].clicked === true) {\n      console.log(\"You Guessed Incorrectly!\");\n      this.setGameLoss();\n    }\n  };\n\n\n  render() {\n    return (\n      <>\n        <Navbar status={this.state.status} score={this.state.score} topScore={this.state.topScore} />\n        <Jumbotron />\n        <Carousel id={this.state.rand}>\n          {this.state.chars.map(character => (\n            <CarouselItem\n              handleClick={this.handleClick}\n              id={character.id}\n              key={character.id}\n              alt={character.alt}\n              src={character.src}\n              character={character}\n            />\n          ))}\n        </Carousel>\n        <Footer />\n      </>\n    );\n  }\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}